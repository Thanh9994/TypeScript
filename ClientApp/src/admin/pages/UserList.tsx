import { useEffect, useState } from "react";
import {
  Table,
  Button,
  message,
  Tag,
  Popconfirm,
  Modal,
  Form,
  Input,
  Select,
  Switch,
} from "antd";
import { http } from "../../api/http";
import type { Address, User } from "../../types/interface";

export default function UserList() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [openModal, setOpenModal] = useState(false);
  const [form] = Form.useForm();

  // ‚úÖ L·∫•y danh s√°ch user
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const res = await http.get("/users");
      setUsers(res.data.data || []);
    } catch (error: any) {
      message.error(error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // ‚úÖ X√≥a user
  const handleDelete = async (id: string) => {
    try {
      await http.delete(`/users/${id}`);
      message.success("üóëÔ∏è X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
      fetchUsers();
    } catch (error: any) {
      message.error(error.response?.data?.message || "X√≥a th·∫•t b·∫°i");
    }
  };

  // ‚úÖ M·ªü modal ch·ªânh s·ª≠a
  const handleUpdate = (record: User) => {
    setEditingUser(record);
    form.setFieldsValue(record);
    setOpenModal(true);
  };

  // ‚úÖ L∆∞u thay ƒë·ªïi user
  const handleSave = async (values: any) => {
    try {
      setLoading(true);
      if (!editingUser) return;
      const res = await http.put(`/users/${editingUser._id}`, values);
      message.success(res.data.message || "C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      setOpenModal(false);
      fetchUsers();
    } catch (err: any) {
      message.error(err.response?.data?.message || "L·ªói khi c·∫≠p nh·∫≠t");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>  
      <h2 className="text-xl font-semibold mb-4">Danh s√°ch ng∆∞·ªùi d√πng</h2>
      <Table
        bordered
        dataSource={users}
        rowKey="_id"
        loading={loading}
        pagination={{ pageSize: 6, showSizeChanger: false }}
        style={{ fontSize: 15 }}
        columns={[
          {
            title: "STT",
            render: (_: any, __: any, index: number) => index + 1,
            width: 60,
            align: "center",
          },
          { title: "T√™n ng∆∞·ªùi d√πng", dataIndex: "username", key: "username" },
          { title: "Email", dataIndex: "email", key: "email" },
          { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone", key: "phone" },
          {
            title: "ƒê·ªãa ch·ªâ",
            dataIndex: "addresses",
            key: "addresses",
            render: (addresses: Address[]) =>
              addresses && addresses.length > 0
                ? addresses.map((a) => (
                    <div key={a._id}>
                      <Tag color={a.isDefault ? "green" : "blue"}>
                         {a.label}, {a.street}, {a.city}{a.country ? `, ${a.country}` : ""}
                      </Tag>
                    </div>
                  ))
                : <Tag color="gray">Kh√¥ng c√≥</Tag>,
          },
          {
            title: "Vai tr√≤",
            dataIndex: "role",
            key: "role",
            render: (role: string) => {
              switch (role) {
                case "admin":
                  return <Tag color="red">Qu·∫£n tr·ªã</Tag>;
                case "staff":
                  return <Tag color="orange">Nh√¢n vi√™n</Tag>;
                default:
                  return <Tag color="blue">Kh√°ch h√†ng</Tag>;
              }
            },
          },
          {
            title: "Tr·∫°ng th√°i",
            dataIndex: "active",
            key: "active",
            render: (active: boolean) =>
              active ? (
                <Tag color="green">Ho·∫°t ƒë·ªông</Tag>
              ) : (
                <Tag color="gray">T·∫°m kh√≥a</Tag>
              ),
          },
          {
            title: "H√†nh ƒë·ªông",
            key: "action",
            align: "center",
            render: (_: any, record: any) => (
              <>
                <Button
                  type="link"
                  onClick={() => handleUpdate(record)}
                  style={{ marginRight: 8 }}
                >
                  C·∫≠p nh·∫≠t
                </Button>
                <Popconfirm
                  title="B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi n√†y?"
                  onConfirm={() => handleDelete(record._id)}
                  okText="Xo√°"
                  cancelText="Hu·ª∑"
                >
                  <Button danger type="link">
                    Xo√°
                  </Button>
                </Popconfirm>
              </>
            ),
          },
        ]}
      />

      {/* üß© Modal c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng */}
      <Modal
        title="C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng"
        open={openModal}
        onCancel={() => setOpenModal(false)}
        footer={null}
      >
        <Form form={form} layout="vertical" onFinish={handleSave}>
          <Form.Item label="T√™n ng∆∞·ªùi d√πng" name="username" rules={[{ required: true, message: "Nh·∫≠p t√™n!" }]}>
            <Input placeholder="T√™n ng∆∞·ªùi d√πng" />
          </Form.Item>

          <Form.Item label="S·ªë ƒëi·ªán tho·∫°i" name="phone">
            <Input placeholder="S·ªë ƒëi·ªán tho·∫°i" />
          </Form.Item>

          <Form.Item label="Vai tr√≤" name="role" rules={[{ required: true }]}>
            <Select
              options={[
                { value: "admin", label: "Qu·∫£n tr·ªã" },
                { value: "staff", label: "Nh√¢n vi√™n" },
                { value: "user", label: "Kh√°ch h√†ng" },
              ]}
            />
          </Form.Item>

          <Form.Item label="Tr·∫°ng th√°i" name="active" valuePropName="checked">
            <Switch checkedChildren="Ho·∫°t ƒë·ªông" unCheckedChildren="Kh√≥a" />
          </Form.Item>

          <Form.Item>
            <Button type="primary" htmlType="submit" loading={loading} block>
              L∆∞u thay ƒë·ªïi
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}
